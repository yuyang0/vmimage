// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	vmimage "github.com/yuyang0/vmimage"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// ListLocalImages provides a mock function with given fields: ctx, user
func (_m *Manager) ListLocalImages(ctx context.Context, user string) ([]vmimage.Image, error) {
	ret := _m.Called(ctx, user)

	var r0 []vmimage.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]vmimage.Image, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []vmimage.Image); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vmimage.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadImage provides a mock function with given fields: imgName
func (_m *Manager) LoadImage(imgName string) (vmimage.Image, error) {
	ret := _m.Called(imgName)

	var r0 vmimage.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (vmimage.Image, error)); ok {
		return rf(imgName)
	}
	if rf, ok := ret.Get(0).(func(string) vmimage.Image); ok {
		r0 = rf(imgName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmimage.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(imgName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewImage provides a mock function with given fields: fullname
func (_m *Manager) NewImage(fullname string) (vmimage.Image, error) {
	ret := _m.Called(fullname)

	var r0 vmimage.Image
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (vmimage.Image, error)); ok {
		return rf(fullname)
	}
	if rf, ok := ret.Get(0).(func(string) vmimage.Image); ok {
		r0 = rf(fullname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vmimage.Image)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fullname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
